protected Packet NewBuildIpV6PacketGroup2ExtensionHeaderPacketA(UInt32 uiIdentifier, UInt32 uiSequence, byte bVersion, byte bTrafficClass, int nFlowLabel, String strPayload)
        {
            EthernetLayer ethernetLayer =
                new EthernetLayer
                {
                    Source = new MacAddress(sourceMAC), //"00:05:1b:a6:a1:22"),
                    //Destination = new MacAddress("02:00:55:34:03:08"),    // Joe's UXM
                    Destination = new MacAddress(destinationMAC),   //"02:00:55:34:02:43"),      // Tracy's UXM
                    EtherType = EthernetType.IpV6,
                };

            // 4, 0, 5, 7, and 15
            // 0011, 0000, 0101, 0111, 1111
            IpV6Layer ipV6Layer =
                new IpV6Layer
                {
                    //Source = new IpV6Address("2601:245:4002:30a0:0cfd:a476:6039:1cdc"),
                    //Source = new IpV6Address("2001:0:5534:308:c94a:34d0:92da:39eb"),  // IPv6 assigned to Laptop from Joe's UXM router
                    Source = new IpV6Address(sourceIPv6Address),    //"2001:0:5534:243:3867:41f:7f2a:e625"),    // IPV6 assigned to Laptop from Tracy's UXM router
                    //CurrentDestination = new IpV6Address("2001:5:5534:308:0000:0000:0000:5"),   // DUT's IPV6 assigned from UXM
                    CurrentDestination = new IpV6Address(dutIPv6Address),    //"2001:5:5604:0347:0000:0000:0000:5"),   // DUT's IPV6 assigned from UXM
                    FlowLabel = nFlowLabel,
                    HopLimit = 128,
                    NextHeader = IpV4Protocol.IpV6HopByHopOption,    //.IpV6HopByHopOption,
                    CustomVersion = bVersion,
                    TrafficClass = bTrafficClass,
                };

            IpV6OptionPadN optpadN = new IpV6OptionPadN(4);

            IpV6Options ipv6options = new IpV6Options(optpadN);

            IpV6ExtensionHeaderHopByHopOptions ipv6HopByHopExtensionHeader =
                new IpV6ExtensionHeaderHopByHopOptions(IpV4Protocol.IpV6Opts, ipv6options);


            // Define IpV6OptionUnknown
            byte[] buffer = {0x00, 0x00, 0x00, 0x00};
            DataSegment dataSegment = new DataSegment(buffer);
            IpV6OptionUnknown optUnknown = new IpV6OptionUnknown((IpV6OptionType)135, dataSegment);

            IpV6Options ipv6options2 = new IpV6Options(optUnknown);

            IpV6ExtensionHeaderDestinationOptions ipv6DestinationOptions =
                new IpV6ExtensionHeaderDestinationOptions(IpV4Protocol.FragmentHeaderForIpV6, ipv6options2);


            // Fragment Header
            IpV6ExtensionHeaderFragmentData ipv6ExtensionHeaderFragment =
                new IpV6ExtensionHeaderFragmentData(IpV4Protocol.InternetControlMessageProtocolForIpV6, 0x0000, true, 0x0, 0x00);


            // Test Case
            IpV6ExtensionHeaders ipv6ExtHeads = new IpV6ExtensionHeaders(ipv6HopByHopExtensionHeader, ipv6DestinationOptions, ipv6ExtensionHeaderFragment);
            //IpV6ExtensionHeaders ipv6ExtHeads = new IpV6ExtensionHeaders(ipv6DestinationOptions);    //, ipv6ExtensionHeaderFragment);

            ipV6Layer.ExtensionHeaders = ipv6ExtHeads;




            //ipV6Layer.CustomVersion = 0x04;
            uint uintLayerVariable;
            uintLayerVariable = (uiIdentifier << 16) | uiSequence;

            IcmpIpv6UnknownLayer icmpIpv6Layer = new IcmpIpv6UnknownLayer();
            icmpIpv6Layer.LayerMessageType = 0x80;
            icmpIpv6Layer.LayerCode = 0;
            //icmpIpv6Layer.LayerVariable = 0x0001F001;   // Identifier + Sequence = 00 01 00 84 
            icmpIpv6Layer.LayerVariable = uintLayerVariable;
            icmpIpv6Layer.Payload = new Datagram(Encoding.ASCII.GetBytes(strPayload));
            Console.WriteLine("Checksum: " + icmpIpv6Layer.Checksum);
            Log.Info("Checksum: " + icmpIpv6Layer.Checksum);

            PacketBuilder builder = new PacketBuilder(ethernetLayer, ipV6Layer, icmpIpv6Layer);
            Console.WriteLine("Checksum: " + icmpIpv6Layer.Checksum);
            Log.Info("Checksum: " + icmpIpv6Layer.Checksum);

            Packet newPacket = builder.Build(DateTime.Now);

            return newPacket;
        }
