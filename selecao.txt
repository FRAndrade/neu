// Author: MyName
// Copyright:   Copyright 2017 Keysight Technologies
//              You have a royalty-free right to use, modify, reproduce and distribute
//              the sample application files (and/or any modified version) in any way
//              you find useful, provided that you agree that Keysight Technologies has no
//              warranty, obligations or liability for any sample application files.
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Windows.Forms;

using OpenTap;  // Use Platform infrastructure/core components (log,TestStep definition, etc)
using PcapDotNet.Base;
using PcapDotNet.Core;
using PcapDotNet.Packets;
using PcapDotNet.Packets.Arp;
using PcapDotNet.Packets.Dns;
using PcapDotNet.Packets.Ethernet;
using PcapDotNet.Packets.Gre;
using PcapDotNet.Packets.Http;
using PcapDotNet.Packets.Icmp;
using PcapDotNet.Packets.Igmp;
using PcapDotNet.Packets.IpV4;
using PcapDotNet.Packets.IpV6;
using PcapDotNet.Packets.Transport;
using System.Threading;

namespace Tap.Plugins.Anatel_IPv6_Test_update
{
    [Display("V6LC.1.3.1_FragmentReassembly", Group: "Anatel_IPv6_Test_update", Description: "Insert description here")]
    public class V6LC_1_3_1_FragmentReassembly : V6LC_BaseTest
    {
        #region Settings
        [Display("Validate Ping Reply", Group: "Limits - Part A", Order: 4.5, Description: "Validate Ping Reply")]
        public PING_REPLY_VALIDATE PartAPingReplyValidate { get; set; }

        [Display("Validate Ping Reply", Group: "Limits - Part B", Order: 5.5, Description: "Validate Ping Reply")]
        public PING_REPLY_VALIDATE PartBPingReplyValidate { get; set; }

        #endregion

        public V6LC_1_3_1_FragmentReassembly()
            : base()
        {
            // Show Validate options on GUI
            showValidateEchoRequest = true;
            showValidateEchoReply = false;

            // Validate options for this test
            validateEchoRequest = YesNo.Yes;
            validateEchoReply = YesNo.Yes;

            // Expected Test Case result
            PartAPingReplyValidate = PING_REPLY_VALIDATE.PING_REPLY;
            PartBPingReplyValidate = PING_REPLY_VALIDATE.PING_REPLY;

            FormatStepName();
        }

        /// <summary>
        /// Procedure:
        /// Part A: All Fragments are Valid
        /// 1. TN1 transmits Fragments A.1, A.2, and A.3 in order. All fragments have the same Source
        /// Address, Destination Address, and Fragment ID.
        /// 2. Observe the packets transmitted by the NUT.
        /// Part B: All Fragments are Valid, reverse order
        /// 3. TN1 transmits Fragments A.3, A.2, and A.1, in that order. All fragments have the same Source
        /// Address, Destination Address, and Fragment ID.
        /// 4. Observe the packets transmitted by the NUT.
        /// 
        /// Observable Results:
        /// • Part A
        /// Step 2: The NUT must transmit an Echo Reply to TN1 in response to the reassembled Echo
        /// Request.
        /// • Part B
        /// Step 4: The NUT must transmit an Echo Reply to TN1 in response to the reassembled Echo
        /// Request.
        /// </summary>
        public override void Run()
        {
            CommonTestInit();

            Verdict PingRequestReceivedStatus = Verdict.NotSet;
            Verdict PingReplyReceivedStatus = Verdict.NotSet;
            Verdict OverallStatus = Verdict.Pass;

            // Retrieve the device list from the local machine
            IList<LivePacketDevice> allDevices = LivePacketDevice.AllLocalMachine;

            if (allDevices.Count == 0)
            {
                Log.Info("No interfaces found! Make sure WinPcap is installed.");
                return;
            }

            // Print the list
            for (int i = 0; i != allDevices.Count; ++i)
            {
                LivePacketDevice device = allDevices[i];
                Log.Info((i + 1) + ". " + device.Name);
                if (device.Description != null)
                    Log.Info(" (" + device.Description + ")");
                else
                    Log.Info(" (No description available)");
            }

            // Interface Index
            int deviceIndex = nicId;

            // Take the selected adapter
            PacketDevice selectedDevice = allDevices[deviceIndex - 1];

            // Open the output device
            using (PacketCommunicator communicator = selectedDevice.Open(100, // name of the device
                                                                         PacketDeviceOpenAttributes.Promiscuous, // promiscuous mode
                                                                         1000)) // read timeout
            {
                // ****************************************************************************
                // ***************************** PART A ***************************************
                // ****************************************************************************

                // Transmit Packet
                uintSequenceNumber++;
                byte bVer = (byte)Byte.Parse("6");
                byte bTrafficClass = 0;
                int nFlowLabel = 0;

                String TapFolder = System.IO.Path.GetDirectoryName(System.Windows.Forms.Application.ExecutablePath);
                String startTime = PlanRun.StartTime.ToString("yyyy-MM-dd-HH-mm-ss-");
                String logFileName = TapFolder + @"\Results\" + startTime + this.GetType().Name;
                // Start Packet Capture
                PcapCapturePackets packetCapture = new PcapCapturePackets(Log, nicId, sourceMAC, destinationMAC, sourceIPv6Address, dutIPv6Address, logFileName + "_PartA");

                for (int iTestCase = 0; iTestCase < 2; iTestCase++)
                {
                    uintSequenceNumber++;

                    Packet packetA = NewBuildIpV6PacketGroup3FragmentReassembly(uintIdentifier, uintSequenceNumber, bVer, bTrafficClass, nFlowLabel, 0);
                    Packet packetB = NewBuildIpV6PacketGroup3FragmentReassembly(uintIdentifier, uintSequenceNumber, bVer, bTrafficClass, nFlowLabel, 1);
                    Packet packetC = NewBuildIpV6PacketGroup3FragmentReassembly(uintIdentifier, uintSequenceNumber, bVer, bTrafficClass, nFlowLabel, 2);

                    // Start packet capture
                    switch (iTestCase)
                    {
                        case 0:
                            // Initialized to PartA when we declared the packetcapture
                            break;
                        case 1:
                            TapThread.Sleep(200);
                            packetCapture = new PcapCapturePackets(Log, nicId, sourceMAC, destinationMAC, sourceIPv6Address, dutIPv6Address, logFileName + "_PartB");
                            break;
                    }

                    // Make sure Packet Capture has started before sending ping request
                    TapThread.Sleep(2000);

                    // Reset Packet counter
                    packetCapture.PacketCounter = 0;
                    packetCapture.LastPacket = null;
                    packetCapture.LastPacketParameterProblem = null;

                    // Transmit Packets
                    switch (iTestCase)
                    {
                        case 0:
                            communicator.SendPacket(packetA);
                            communicator.SendPacket(packetB);
                            communicator.SendPacket(packetC);
                            break;
                        case 1:
                            communicator.SendPacket(packetC);
                            communicator.SendPacket(packetB);
                            communicator.SendPacket(packetA);
                            break;
                    }

                    // Wait
                    Log.Info("Run()->Sleep");
                    int nRetry = 0;
                    do
                    {
                        // Wait until we have received echo and reply
                        TapThread.Sleep(200);
                        Log.Info("Retry: " + nRetry);
                    } while ((packetCapture.PacketCounter < 4) && (nRetry++ < 40));

                    // Validate Received echo
                    Log.Info("Packets Received: " + packetCapture.PacketCounter);
                    Log.Warning("Numero de Packets esperados - 4");
                    Log.Warning("Packets Recebidos: " + packetCapture.PacketCounter);

                    // Terminate capture packets
                    Packet lastPacket = packetCapture.LastPacket;
                    int nPacketCount = packetCapture.PacketCounter;
                    //packetCapture.StopPacketCapture();
                    //packetCapture = null;

                    // Validate Test Case
                    // Validate Echo reply was received
                    int nEchoReplyReceivedStatus = -1;
                    nEchoReplyReceivedStatus = ValidateEchoReceived(nPacketCount);
                    // Publish Results
                    Results.Publish("Main Results", new
                        List<string> { "Test Name", "LSL", "USL", "Measurement" },
                        new IConvertible[] { this.Name + "_Ping_Request_Received", 0, 1, nEchoReplyReceivedStatus });
                    PingRequestReceivedStatus = EvaluateResult(this.Name + "_Ping_Request_Received", 0, 1, nEchoReplyReceivedStatus);

                    switch (iTestCase)
                    {
                        case 0:
                            // Validate Ping Reply
                            EvaluatePingReply(PartAPingReplyValidate, PingRequestReceivedStatus, nPacketCount, ref PingReplyReceivedStatus, lastPacket);
                            break;
                        case 1:
                            // Validate Ping Reply
                            EvaluatePingReply(PartBPingReplyValidate, PingRequestReceivedStatus, nPacketCount, ref PingReplyReceivedStatus, lastPacket);
                            break;
                    }

                    // Update verdict to pass only if passed
                    if ((PingRequestReceivedStatus == Verdict.Pass) &&
                        (PingReplyReceivedStatus == Verdict.Pass))
                    {

                    }
                    else
                    {
                        // Update status to fail if the test failed
                        OverallStatus = Verdict.Fail;
                    }

                    // Test cleanup
                    CommonTestCleanup(communicator, packetCapture);
                }
            }

            // Update verdict to pass only if PER and RSSI have passed
            if (OverallStatus == Verdict.Pass)
            {
                UpgradeVerdict(Verdict.Pass);
            }
            else
            {
                UpgradeVerdict(Verdict.Fail);
            }
        }

    }
}
